
'   Create        : 2019/09/02
'   Author        : 藤田雅治
'   Description   : 先頭から集計シートまでのテストシートを集計する
'   Maintenance   :
'   Copyright (C) 2002-2019 Murata Machinery,Ltd. All rights reserved.


Const COL_CLASS As String = "B"
Const COL_FUNC As String = "C"
Const COL_TYPE As String = "D"


' 集計
Sub CreateTotalingSheet()
    
    Dim totals As mscorlib.ArrayList
    Set totals = CreateObject("System.Collections.ArrayList")
    Dim types() As String
    types = GetTypesList()
    Dim title_class: title_class = ""
    Dim title_func: title_func = ""
    
    ' 集計シート有無チェック
    Dim is_exist_totating_sheet: is_exist_totating_sheet = False
    For Each ws1 In Sheets
        If ws1.Name = "集計" Then
            is_exist_totating_sheet = True
            Exit For
        End If
    Next
    If is_exist_totating_sheet = False Then
        MsgBox "「集計」シートが存在しません"
        Exit Sub
    End If
    
    ' 先頭から 集計シートまでを処理
    Dim ws As Worksheet
    For Each ws In Sheets
        Dim sheet_name: sheet_name = ws.Name
        If sheet_name = "集計" Then
            Exit For
        End If
        max_row = ws.Cells(Rows.Count, COL_TYPE).End(xlUp).Row
    
        Dim sheet_name_bak: sheet_name_bak = ""
        Dim class_name: class_name = ""
        Dim class_name_bak: class_name_bak = ""
        Dim func_name: func_name = ""
        Dim func_name_bak: func_name_bak = ""
        Dim is_range: is_range = False
        Dim cell_type: cell_type = ""
        
        For row_cnt = 1 To max_row
            cell_type = ws.Cells(row_cnt, COL_TYPE)
            If is_range = True Then
                If ws.Cells(row_cnt, COL_CLASS) <> "" Then
                    class_name = ws.Cells(row_cnt, COL_CLASS)
                End If
                If ws.Cells(row_cnt, COL_FUNC) <> "" Then
                    func_name = ws.Cells(row_cnt, COL_FUNC)
                End If
                If class_name_bak <> class_name Or func_name_bak <> func_name Then
                    ' シート／クラス名／関数名の変わり目
                    class_name_bak = class_name
                    func_name_bak = func_name
                    totals.Add ("")
                    Dim hash As Scripting.Dictionary
                    Set hash = CreateObject("Scripting.Dictionary")
                    hash("sheet_name") = ws.Name
                    hash("class_name") = class_name
                    hash("func_name") = func_name
                    For Each typ In types()
                        hash(typ) = 0
                    Next
                    Set totals(totals.Count - 1) = hash
                End If
                
                If totals(totals.Count - 1).Exists(cell_type) = True Then
                    totals(totals.Count - 1)(cell_type) = totals(totals.Count - 1)(cell_type) + 1
                End If
            End If
            
            ' データ開始マーカー検出
            If cell_type = "分類" Then
                is_range = True
                title_class = ws.Cells(row_cnt, COL_CLASS)
                title_func = ws.Cells(row_cnt, COL_FUNC)
            End If
        Next
    Next
    
    ' 集計シートに出力
    Call OutputTotalsSheet(totals, types(), title_class, title_func)

End Sub

' 観点の取得
Function GetTypesList() As String()
    Dim types() As String
    
    Dim ws As Worksheet
    Set ws = Sheets("分類　観点")
    
    max_row = ws.Cells(Rows.Count, "A").End(xlUp).Row
    ReDim types(max_row - 2)
    For row_cnt = 2 To max_row
        types(row_cnt - 2) = ws.Cells(row_cnt, "A")
    Next
    
    GetTypesList = types
End Function

' 集計シートに出力
Sub OutputTotalsSheet(ByVal totals As mscorlib.ArrayList, ByRef types() As String, ByVal title_class As String, ByVal title_func As String)
    
    Dim ws_pre As Worksheet
    Set ws_pre = ActiveSheet
    
    Dim ws As Worksheet
    Set ws = Sheets("集計")
    ws.Activate
    ws.Cells.Clear
    ' ヘッダ
    ws.Cells(1, 1) = "シート名"
    ws.Cells(1, 1).Interior.Color = RGB(255, 230, 153)
    ws.Cells(1, 2) = title_class
    ws.Cells(1, 2).Interior.Color = RGB(255, 230, 153)
    ws.Cells(1, 3) = title_func
    ws.Cells(1, 3).Interior.Color = RGB(255, 230, 153)
    Dim col: col = 4
    For Each typ In types()
        ws.Cells(1, col) = typ
        ws.Cells(1, col).Interior.Color = RGB(198, 224, 180)
        col = col + 1
    Next
    ws.Cells(1, col) = "総数"
    ws.Cells(1, col).Interior.Color = RGB(91, 155, 213)
    col = col + 1
    
    ' データ部
    Dim sheet_name_bak: sheet_name_bak = ""
    Dim class_name_bak: class_name_bak = ""
    
    Dim total_count: total_count = 0
    Dim row_cnt: row_cnt = 2
    For Each total In totals
        total_count = 0
        If sheet_name_bak <> total("sheet_name") Then
            ws.Cells(row_cnt, 1) = total("sheet_name")
            sheet_name_bak = total("sheet_name")
        End If
        'If class_name_bak <> total("class_name") Then
            ws.Cells(row_cnt, 2) = total("class_name")
            class_name_bak = total("class_name")
        'End If
        ws.Cells(row_cnt, 3) = total("func_name")
        col = 4
        For Each typ In types()
            cnt = total(typ)
            total_count = total_count + cnt
            ws.Cells(row_cnt, col) = cnt
            If cnt = 0 Then
                ws.Cells(row_cnt, col).Interior.Color = RGB(255, 204, 255)
            End If
            col = col + 1
        Next
        ws.Cells(row_cnt, col) = total_count
        ws.Cells(row_cnt, col).Interior.Color = RGB(221, 235, 247)
        col = col + 1
        row_cnt = row_cnt + 1
    Next
    
    Dim max_row: max_row = row_cnt - 1
    Dim max_col: max_col = col - 1
    
    ' 罫線
    With ws.Range(ws.Cells(1, 1), ws.Cells(max_row, max_col))
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).LineStyle = xlDot
        .Borders(xlInsideHorizontal).Weight = xlHairline
    End With
    
    ' 合計／平均
    Dim total_row: total_row = row_cnt
    Dim avg_row: avg_row = row_cnt + 1
    ws.Cells(total_row, 3) = "合計"
    ws.Cells(total_row, 3).Interior.Color = RGB(189, 215, 238)
    ws.Cells(avg_row, 3) = "平均"
    ws.Cells(avg_row, 3).Interior.Color = RGB(189, 215, 238)
    For col = 4 To max_col
        total_count = 0
        For row_cnt = 2 To max_row
            total_count = total_count + ws.Cells(row_cnt, col)
        Next
        ws.Cells(max_row + 1, col) = total_count
        ws.Cells(max_row + 2, col) = total_count / (max_row - 1)
        If total_count = 0 Then
            ws.Cells(max_row + 1, col).Interior.Color = RGB(255, 204, 255)
            ws.Cells(max_row + 2, col).Interior.Color = RGB(255, 204, 255)
        Else
            ws.Cells(max_row + 1, col).Interior.Color = RGB(189, 215, 238)
            ws.Cells(max_row + 2, col).Interior.Color = RGB(189, 215, 238)
        End If
    Next
    
    ' 罫線
    With ws.Range(ws.Cells(max_row, 3), ws.Cells(avg_row, max_col))
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).LineStyle = xlDot
        .Borders(xlInsideHorizontal).Weight = xlHairline
    End With
    
    ' 列幅調整
    ws.Range(Columns(1), Columns(3)).EntireColumn.AutoFit
    ws.Range(Columns(4), Columns(max_col)).ColumnWidth = 12

    ' アクティブシートを元に戻す
    ws_pre.Activate
    
End Sub

